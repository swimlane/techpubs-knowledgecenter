<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="mc-template-page: url('../../Resources/MasterPages/OtherTopics.flmsp');">
    <head><title></title>
        <link href="../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h1 id="automate-an-online-existing-installation">Automate an Online Existing Installation</h1>
        <p>This topic provides steps for automating an online Swimlane installation into an existing Kubernetes cluster.</p>
        <h2 id="other-requirements">Other Requirements</h2>
        <p>To automate this process the following files are needed:</p>
        <ul>
            <li>Swimlane Platform Installer (SPI) license file (ends with <code>.yaml</code>)</li>
            <li>Swimlane license file (ends with <code>.lic</code>)</li>
        </ul>
        <h2 id="spi-kubectl-add-on-installation">SPI Kubectl Add-on Installation</h2>
        <p>In order to automate a Swimlane installation in to an existing cluster, the SPI Kubectl Add-on must be downloaded and correctly setup on a system with access to the cluster:</p>
        <p>For Linux, download and untar the binary file:</p>
        <MadCap:codeSnippet>
            <codeSnippetCopyButton />
            <codeSnippetBody>curl -sSL -O https://get.swimlane.io/existing-cluster/install/linux
tar -zxvf linux
mv kots /usr/local/bin/kubectl-kots
</codeSnippetBody>
        </MadCap:codeSnippet>
        <p>For OSX, download and untar the binary file:</p>
        <MadCap:codeSnippet>
            <codeSnippetCopyButton />
            <codeSnippetBody>curl -sSL -Ohttps://get.swimlane.io/existing-cluster/install/osx
tar -zxvf osx
mv kots /usr/local/bin/kubectl-kots
</codeSnippetBody>
        </MadCap:codeSnippet>
        <h2 id="swimlane-installation-and-deployment">Swimlane Installation and Deployment</h2>
        <p>After the SPI Kubectl Add-on has been installed, install Swimlane with the following command:</p>
        <MadCap:codeSnippet>
            <codeSnippetCopyButton />
            <codeSnippetBody>kubectl kots install swimlane-platform \ 
  --namespace &lt;Namespace&gt; \ 
  --shared-password &lt;SPI Admin Console Password&gt; \ 
  --license-file &lt;SPI License&gt;.yaml \ 
  --port-forward=false \ 
  --config-values &lt;SPI Config File&gt;.yaml
</codeSnippetBody>
        </MadCap:codeSnippet>
        <h3 id="creating-an-spi-config-file">Creating an SPI Config File</h3>
        <p>The <code>&lt;SPI Config File&gt;.yaml</code> file is a YAML-formatted file that outlines the specifications of a Swimlane deployment. You can get the .yaml file from a previously configured installation of SPI or by creating a new file manually.</p>
        <p>To obtain a file from an previously configured SPI install, run the following command from a system with access to the Kubernetes API and the SPI Kubectl Add-on installed:</p>
        <p><code>kubectl kots download swimlane-platform -n &lt;namespace&gt;</code>
        </p>
        <p>This command downloads a copy of the entire SPI deployment specifications to a local folder named <code>swimlane-platform</code>.</p>
        <p>The config file is located at <code>./swimlane-platform/upstream/userdata/config.yaml</code> in the downloaded folder.</p>
        <p>To create the file manually, review the configurable options available in the <a href="existing-cluster-spi-config-file.htm">Existing Cluster SPI</a>.</p>
        <p>Here is a basic version of the config file that you can use for an initial single-node configuration:</p>
        <MadCap:codeSnippet>
            <codeSnippetCopyButton />
            <codeSnippetBody>apiVersion: kots.io/v1beta1
kind: ConfigValues
metadata:
  creationTimestamp: null
  name: &lt;Swimlane Namespace&gt;
spec:
  values:
    is_ha:
      value: "0"
    mongo_admin_user_password:
      value: &lt;Base64 encoded string&gt;
    mongo_admin_user_password_confirm:
      value: &lt;Base64 encoded string&gt;
    mongo_swimlane_user_password:
      value: &lt;Base64 encoded string&gt;
    mongo_swimlane_user_password_confirm:
      value: &lt;Base64 encoded string&gt;
    swimlane_database_encrypt_key:
      value: &lt;Base64 encoded string&gt;
    swimlane_database_encrypt_key_confirm:
      value: &lt;Base64 encoded string&gt;
    swimlane_enable_ingress:
      value: "1"
    swimlane_hostname:
      value: &lt;Swimlane Hostname&gt;
    swimlane_ingress_annotations:                            
      value: |-                                              
        &lt;Insert ingress annotations here&gt;
        &lt;Insert ingress annotations here&gt;
    swimlane_storage_class:                                  
      value: &lt;Storage Class Name&gt;
</codeSnippetBody>
        </MadCap:codeSnippet>
        <h2 id="swimlane-initial-login">Swimlane Initial Login</h2>
        <p>It will take a few minutes for Swimlane to initialize all of the required components. However, automation can effectively 'wait' for a ready state by waiting for a ready status from different parts of the deployment. There are multiple ways to accomplish this wait period, the following code block is just one example:</p>
        <MadCap:codeSnippet>
            <codeSnippetCopyButton />
            <codeSnippetBody>kubectl wait -l statefulset.kubernetes.io/pod-name=swimlane-sw-mongo-0 --for=condition=ready pod --namespace &lt;Swimlane Namespace&gt; --timeout=240s
export SW_API=$(kubectl get po -n &lt;NameSpace&gt; --no-headers -o custom-columns=":metadata.name" | grep -i api)  
kubectl wait --for=condition=ready pod $SW_API -n &lt;NameSpace&gt; --timeout=240s                             
</codeSnippetBody>
        </MadCap:codeSnippet>
        <p>Next, continue with the Swimlane install by creating the initial administrative user.</p>
        <p>Using your Swimlane license .lic file, first generate the necessary license block for the API call with a curl command:</p>
        <p><code>curl -kLv -X POST https://&lt;Swimlane URL&gt;/api/settings/license/upload  -H 'Content-Type: multipart/form-data' -F file=@&lt;Swimlane License File&gt;.lic</code>
        </p>
        <p>Then, to create the initial administrative user, insert the returned JSON into the following curl command:</p>
        <MadCap:codeSnippet>
            <codeSnippetCopyButton />
            <codeSnippetBody>curl -kLv -X POST https://&lt;Swimlane URL&gt;/api/settings/install \
  --header "Content-Type: application/json" \
  -d '{"mailSettings":{},
       "password":"&lt;Admin Password&gt;","confirmPassword":"&lt;Admin Password&gt;",
       "databaseEncryptionKey":"",
       "swimlaneUrl":"https://&lt;Swimlane URL&gt;",
       "license" :&lt;Generated JSON Data&gt;,
       "adminUserName":"&lt;Admin Username&gt;",
       "adminEmail":"&lt;Admin Email&gt;"}'  
</codeSnippetBody>
        </MadCap:codeSnippet>
    </body>
</html>