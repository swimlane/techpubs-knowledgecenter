<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="mc-template-page: url('../../Resources/MasterPages/OtherTopics.flmsp');">
    <head><title></title>
        <link href="../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h1 id="widget-code-structure">Widget Code Structure</h1>
        <p>The widget is implemented as an anonymous class which extends the <code>HTMLElement</code> class.  The preferred method to create a widget is to extend the <code>SwimlaneElement</code> which extends the <code>LitElement</code> class which itself extends <code>HTMLElement</code> class.</p>
        <p>Here is an example of the default widget with annotation added:</p>
        <MadCap:codeSnippet>
            <codeSnippetCopyButton />
            <codeSnippetBody style="mc-code-lang:JavaScript;">/**
 * Import `SwimlaneElement` class.
 * The `css` and `html` methods are also imported from `swimlane-element`.
 */
import { SwimlaneElement, css, html } from '@swimlane/swimlane-element@1';

/**
 * The `recordFrameTemplate` is a template helper function see templates below.
 */
import { recordFrameTemplate } from '@swimlane/swimlane-element@1/templates.js';

/**
 * A Swimlane widget is implemented as an anonymous class which extends the `SwimlaneElement` class.
 */
export default class extends SwimlaneElement {
  /**
   * The `styles()` getter is a static class getter, in other words, it is a property
   defined on the class constructor.
   * This style getter method does not have access to any properties stored in the
   objects (i.e. `record` and `report` data).
   * This getter defines styles common to all instances of this widget.
   * Defining this in your widget is optional.
   */
  static get styles() {
    return [super.styles, css`
      .frame::after {
        content: "Record Output";
      }
    `];
  }

  /**
   * The `render` method is an instance method and, therefore, has access to properties stored
   in the object (i.e. `record` and `report` data), see properties below.
   * The render method is scheduled by `LitElement` Lifecycle events and must return
   a `lit-html` template.
   * Defining this method in your widget is required.
   */
  render() {
    return recordFrameTemplate(html`
      &lt;pre&gt;${JSON.stringify(this.record, undefined, 2)}&lt;/pre&gt;
    `);
  }
}
</codeSnippetBody>
        </MadCap:codeSnippet>
        <h2 id="properties">Properties</h2>
        <p><code>SwimlaneElement</code> defines the following properties:</p>
        <ul>
            <li><code>this.record</code> - Available to record widgets, an object containing key-value pairs for each field on the record.</li>
            <li><code>this.report</code> - Available to report widgets, an object containing <code>data</code>, <code>rawData</code>, and <code>query</code>.</li>
            <li><code>this.contextData</code> - Available to both record and report widgets, an object containing data such as <code>application</code>, <code>currentUser</code>, <code>origin</code>, and <code>token</code>.</li>
        </ul>
        <p class="note"><strong>Note:</strong> Documentation on how <code>LitElement</code> handles properties and attributes can be found <a href="https://lit-element.polymer-project.org/guide/properties">here</a>.</p>
        <h2 id="lifecycle">Lifecycle</h2>
        <p>In addition to the <code>HtmlElement</code> and <code>LitElement</code> lifecycle methods, <code>SwimlaneElement</code> adds the <code>resizedCallback</code> method.</p>
        <ul>
            <li><code>resizedCallback</code> - This method (called whenever the element is resized) but default simply calls <a href="https://lit-element.polymer-project.org/guide/lifecycle#requestupdate"><code>requestUpdate</code></a>.</li>
        </ul>
        <p class="note"><strong>Note:</strong>
Documentation of <code>LitElement</code> lifecycle methods and properties can be found <a href="https://lit-element.polymer-project.org/guide/lifecycle">here</a>.</p>
        <h2 id="events">Events</h2>
        <p><code>SwimlaneElement</code> adds the following methods for emitting Swimlane widget events:</p>
        <ul>
            <li><code>this.updateRecordValue(key, value)</code> : Available to record widgets. Updates record data by field key.</li>
            <li><code>this.addComment(key, value)</code> : Available to record widgets. Adds a new comment by field key.</li>
            <li><code>this.triggerIntegration(taskId)</code> : Available to record widgets. Triggers an integration.</li>
            <li><code>this.triggerSave()</code> : Available to record widgets. Triggers record save on the record page.</li>
        </ul>
        <p class="note"><strong>Note:</strong> Documentation on how to handle events in <code>LitElement</code> can be found <a href="https://lit-element.polymer-project.org/guide/events">here</a>.</p>
        <p>For single value fields (text/numeric/date fields, etc) or single-select fields types simply emit the new value:</p>
        <MadCap:codeSnippet>
            <codeSnippetCopyButton />
            <codeSnippetBody style="mc-code-lang:JavaScript;">// value can be a string or number type.
this.updateRecordValue('field-key', 'new value');
</codeSnippetBody>
        </MadCap:codeSnippet>
        <p>For text and numeric list field types, emit an array of new values. If duplicate values exist, their <code>id</code>s get reused.</p>
        <MadCap:codeSnippet>
            <codeSnippetCopyButton />
            <codeSnippetBody style="mc-code-lang:JavaScript;">// value is an array of strings for text list, and numbers for numeric list.
this.updateRecordValue('field-key', ['First item', 'Third item']);
</codeSnippetBody>
        </MadCap:codeSnippet>
        <p>For multi-select field types (selects, radio buttons, checkboxes), emit an array of new values. Every element in the value must exist in the <code>contextData</code>.</p>
        <MadCap:codeSnippet>
            <codeSnippetCopyButton />
            <codeSnippetBody style="mc-code-lang:JavaScript;">// value is an array of strings
this.updateRecordValue('field-key', ['First item', 'Third item']);
// Every element in value must exist in the `contextData`.
// e.g. this.updateRecordValue('field-key', ["Fourth item"]) // ERROR
</codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To add a comment emit the new comment as a string.</p>
        <MadCap:codeSnippet>
            <codeSnippetCopyButton />
            <codeSnippetBody style="mc-code-lang:JavaScript;">this.addComment('comments-key', 'Hello World!');
</codeSnippetBody>
        </MadCap:codeSnippet>
    </body>
</html>