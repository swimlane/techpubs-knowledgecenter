<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="mc-template-page: url('../Resources/MasterPages/OtherTopics.flmsp');">
    <head>
        <link href="../Resources/Stylesheets/MainStyles.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h1>Helpful Commands and Queries</h1>
        <p>This topic is a compilation of commands and queries that you can utilize with Swimlane.</p>
        <h2>MongoDB Swimlane Database</h2>
        <p>Once you’ve connected to MongoDB’s Swimlane database, you can use some of the queries listed here. The queries are organized in this section by the collections targeted within them.</p>
        <p class="note"><b>Note:</b> Be sure to backup your Swimlane data before using these commands: _update_, _remove_, _delete_, _deleteOne_, _deleteMany_, or _drop_.</p>
        <p class="important"><b>Important</b>! There is a file size limit of 500MB.</p>
        <h3>Logs</h3>
        <p>To find diagnostic information for the most recently encountered errors:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Logs.find({Level:'Error'}).sort({Date:-1}).limit(30)</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find diagnostic information for errors not strictly related to task execution:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Logs.find({Level:'Error', TaskName: {$exists: false}}).sort({Date:-1})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find diagnostic information for errors strictly related to task execution, or for any recently executed tasks:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Logs.find({Level:'Error', TaskName: {$exists: true}}).sort({Date:-1})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find recent execution history (start time, end time, outcome):</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Logs.find({TaskName:'GravityZone Host Details Daily Sync'}).sort({Date:-1}).limit(50)</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find instances of specific error messages or print-statement diagnostic messages:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">  db.Logs.find({Message:/update existing SOC record/i}).sort({Date:-1}).limit(50)
  </MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find multiple instances of specific error messages:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">// separately
  db.getCollection('Logs').find({Message:/Create Task from Alerts/i}).sort({Date:-1}).limit(10)
  db.getCollection('Logs').find({Message:/validationexception/i}).count() </MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">// together
  db.getCollection('Logs').find({$and: [{Message:/validationexception/i}, {Message:/create task from alert/i}]}).sort({Date:-1}).limit(20)`
  </MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">// find one but exclude the other
  db.getCollection('Logs').find({$and: [{Message:/validationexception/i}, {Message:{$not:/create task from alert/i}}]}).sort({Date:-1}).limit(20)</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find log entries using regular expression searching:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Logs.find({'Message':{'$regex':'^Failed to process the job .* an exception occurred. Job was automatically deleted'}, 'Exception.Text':/EmailImportRetrievalJob/i, Date:{$gt:new ISODate('2017-06-06T17:25:00.000Z')}}).sort({Date:-1}).limit(5)</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find all log entries within a certain span of time:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Logs.find({Date:{$gte: ISODate('2017-11-28T14:00:00.000Z'), $lte: ISODate('2017-11-28T15:00:00.000Z')}}).count()</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Logs.find({Level:'Error', Date:{$gte: ISODate('2018-09-11T22:00:00.000Z'), $lte: ISODate('2018-09-18T17:20:00.000Z')}}).sort({Date:-1}).limit(100)</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>You can also combine several of the above needs (time span inclusion, specific message exclusion):</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.getCollection('Logs').aggregate(
   [
     {
       $project:
          {
            Date:{$and: [{$gte: ISODate('2017-11-20T21:00:00.000Z')}, {$lte: ISODate('2017-11-20T21:07:00.000Z')}]},
            Message:{$and: [{$not:/Email asset/i}, {$not:/GetNewMail/i}]}
          }
     }
   ]
).sort({Date:-1})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To extract a large set of JSON documents to the console:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">var cursor = db.Logs.find({Date:{$gte: ISODate('2017-09-18T00:00:00.000Z')}}).sort({Date:-1});
while(cursor.hasNext()) {
    records.push(cursor.next())
}
print(tojson(records));

// This can be done for any collection: Logs, Records, Tasks, etc.</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h3>Records</h3>
        <p class="important"><b>Important!</b> MongoDB limits the size of a record to 16MB.</p>
        <p>To inspect an individual Swimlane record’s properties and field values (after connecting to the Swimlane database):</p>
        <p>`db.Records.find({TrackingFull:'CASE-6'})`</p>
        <p>To edit a field value in a Swimlane record:</p>
        <p class="note"><b>Note:</b> This requires two commands because every field value is stored in two places within the underlying record.</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Records.update(
  { "TrackingFull" : "RC-1", "Values.k": 'a5YCKOsVt6sXZ' },
  { $set: { "Values.$.v": "not applicable" } }
)</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>and</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Records.update(
  { "TrackingFull" : "RC-1" },
  { $set: { "ValuesDocument.a5YCKOsVt6sXZ": "not applicable" } }
)</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find all records in given application with a malformation (incorrect null) in a certain field, and repair the affected records:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">// find effected records
db.Records.find({ApplicationId: '578aa3a50f1b8814c4556a7b', 'Values.k': '578aa43c1b095222d1ad4d49', 'Values.v': null})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">// fix one
db.Records.update({ApplicationId: '578aa3a50f1b8814c4556a7b', TrackingFull:'ALRT-XXXXX', 'Values.k': '578aa43c1b095222d1ad4d49', 'Values.v': null}, {$pull: {'Values': {'k': '578aa43c1b095222d1ad4d49'}}}, {$unset: {'ValuesDocument.578aa43c1b095222d1ad4d49': ''}})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">// fix all
db.Records.update({ApplicationId: '578aa3a50f1b8814c4556a7b', 'Values.k': '578aa43c1b095222d1ad4d49', 'Values.v': null}, {$pull: {'Values': {'k': '578aa43c1b095222d1ad4d49'}}}, {$unset: {'ValuesDocument.578aa43c1b095222d1ad4d49': ''}}, {multi:true})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find all parent records in a given application that does not have any children:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Records.find({ApplicationId: '578aa3a50f1b8814c4556a7b', 'ReferencedRecordIds': {$eq: []}})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find records with corrupted field values or other malformation:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Records.find({"$text": {"$search": "JArray"}})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Records.find({"$text": {"$search": "JToken"}})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find distinct values within a collection, e.g. to get the list of all values for a given record field in a given application:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.getCollection('Records').distinct("ValuesDocument.ajs1o")</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To count records by application:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Records.aggregate([{$group: {_id: "$ApplicationId", count: {$sum: 1}}},{$sort: {count: -1}}])</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To unlock all records:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.getCollection('Records').update({Locked: true}, { $unset: { Locked: 1, LockedDate: 1, LockingUser: 1}})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To determine the count of records that are restricted or not yet restricted:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.getCollection('Records').find(
    {
       'ApplicationId': {$eq: 'APPLICAION_ID_HERE'},
       'Allowed._id': {$eq: []}
       // 'Allowed._id': {$eq: 'USER_ID_HERE'}  Can also check for records that have specific user/group id restrictions
    }
).count()</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find records with text and/or numeric list fields whose values were improperly created via the RESTful API:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">// Find records whose List field values were not given any identifiers

db.getCollection('Records').find({
    "Values": { $elemMatch: {
      $and:[
        { "v._t": { $regex: "Core.Models.Record.ListItem*" } },
        {
          $or: [
              { "v._v": { $elemMatch: { "_id": { $exists: false } } } },
              { "v._v": { $elemMatch: { "_id": null } } }
          ]
        }
      ]  
    }}
})
</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">// Find records whose List field values have identifiers, but these are identifiers are not unique within a given field in a given record

db.Records.aggregate([
    {$unwind: "$Values"},
    {$unwind: "$Values.v._v"},
    {$group: {_id: {valueId: "$Values.v._v._id", recordId: "$_id", fieldId: "$Values.k", type: "$Values.v._t"}, count: {$sum: 1}} },
    {$match: {
        "_id.type": { $regex: /^Core.Models.Record.ListItem*/ },
        "_id.valueId": {$exists: true},
        "_id.valueId": {$ne: null},
        count: {$gt: 1}
    } },
    {$project: { "_id.valueId" : 1, "_id.recordId" : 1, "_id.fieldId" : 1, "count": 1 } }
])</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To delete a record and its history:</p>
        <p class="note"><b>Note:</b>&#160; This should only be used when record deletion through the Swimlane UI has failed. You can run this command after connecting to the Swimlane database.</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Records.deleteOne({TrackingFull:'CASE-1'})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>Next, connect to the SwimlaneHistory database and run:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Records.deleteMany({'Version.TrackingFull':'CASE-1'})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>See other SwimlaneHistory queries below.</p>
        <h3>Settings</h3>
        <p>To extend password expiration:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Settings.update({}, {$set: {'SecurityParameters.PasswordExpiration': 180}})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To disable Active Directory sync:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Settings.update({}, {$set: {'Directory.Enabled': 'false'}})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h3>Reports</h3>
        <p>To detect report filter corruption:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Reports.find({"Filters": {"$elemMatch": {"Value._v.name._t": "JValue"}}}).count()</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To inspect report filter corruption:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Reports.find({"Filters": {"$elemMatch": {"Value._v.name._t": "JValue"}}}).pretty()</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To purge report filter corruption:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Reports.update({"Filters": {"$elemMatch": {"Value._v.name._t": "JValue"}}}, {$set: {Filters:[]}})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h3>Hangfire</h3>
        <p>To purge the Hangfire job queue:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">// unfortunately, there is no method for clearing only specifically chosen tasks
// delete all task execution data
db.hangfire.jobGraph.drop()
// delete all task execution data (more thorough)
db.hangfire.job.remove({});
db.hangfire.jobQueue.drop();
db.hangfire.aggregatedcounter.drop();
db.hangfire.jobGraph.drop()</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h3>Tasks</h3>
        <p>To find all e-mail ingest tasks of type built-in IMAP import:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Tasks.find({'Action.Descriptor.Name':/Email Import/})
db.Tasks.find({'Trigger.Type':/email/})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find all integration tasks that rely on a specific asset:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.getCollection('Tasks').find({'Action.AssetId':'aTDGoDcW1mTxX'}) // for most tasks do this
db.getCollection('Tasks').find({'Triggers.AssetId':'aTDGoDcW1mTxX'}) // for built-in tasks do this</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find all e-mail ingest tasks relying on the sw\_microsoft\_exchange plugin:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Tasks.find({'Action.Descriptor.Name':'Exchange Get Email Metadata'})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To remove ghost task menu entries (which result from creating a task with the same name as a task that was previously deleted by application deletion):</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">// Option 1
// Swimlane UI: Navigate to Swimlane &gt; Collections &gt; Menu Items:  Find by task name &gt; Delete

// Option 2
db.getCollection('MenuItems').find({Name: 'ARS - Submit v3 Vector String' })

// Option 3 (as a Python script to find and delete all ghost entries)
from pymongo import MongoClient
import ssl

mongo_connection_string = 'mongodb://Swimlane:UR4Swimlane!@192.168.56.121:27017/Swimlane'

client = MongoClient(mongo_connection_string, ssl=True, ssl_cert_reqs=ssl.CERT_NONE)

db = client['Swimlane']

tasks = db['Tasks']
menu = db['MenuItems']
menu_items = menu.find({'Type': 2})
for item in menu_items:
    task_id = item['TaskId']
    try:
        task = tasks.find_one({'_id': task_id})
        if not task:
            menu.delete_one({'_id': item['_id']})
    except:
        pass</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find all tasks where the script includes the value ‘pendulum’:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.getCollection('Tasks').aggregate([
{ $project: { Name: 1, _id: 1, match: { $gt: [{ $indexOfBytes: [ "$Action.Script", "pendulum"] }, -1] } } },
{ $match: { match: true } }
]);</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>The next two queries list tasks that ran in the last 90 days for MongoDB and with Python.</p>
        <p>For a MongoDB query:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.hangfire.jobGraph.aggregate([{
"$match": {"Parameters.Task Name":
{"$exists": true,
"$ne": "null"},
"CreatedAt": {
"$exists": true,
"$lte": new Date(ISODate().getTime() - 90 * 24 * 60 * 60000)}}},
{"$group": {"_id": "$Parameters.Task Name"}}, ])</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>For a Python script:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve"># List tasks that ran in the last 90 days
import datetime
from pymongo import MongoClient
import ssl
client = MongoClient(host='localhost', port=27017, username='Admin', password='nowayjose', authSource='admin', authMechanism='SCRAM-SHA-1', ssl=True, ssl_cert_reqs=ssl.CERT_NONE).Swimlane
# &lt;class 'pymongo.collection.Collection'&gt;
tasksExecuted = client.get_collection("hangfire.jobGraph")
# &lt;class 'pymongo.command_cursor.CommandCursor'&gt;
tasks_executed_docs = tasksExecuted.aggregate([{
"$match": {"Parameters.Task Name":
{"$exists": True,
"$ne": "null"},
"CreatedAt": {
"$exists": True,
"$lte": datetime.datetime.today() + datetime.timedelta(-90)}}},
{"$group": {"_id": "$Parameters.Task Name"}}, ])
# &lt;class 'list'&gt;
tasks_executed = list(tasks_executed_docs)
for taskId in tasks_executed:
taskId['Task Name'] = taskId.pop('_id')
print(taskId['Task Name'])</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h3>Integration States</h3>
        <p>To clear the state store (the data persisted by _sw\_context.state_) for a given integration task:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.IntegrationStates.deleteOne( { "_id" : "INTEGRATION-TASK-ID"} );</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h3>AspNetUsers</h3>
        <p>To disable 2FA for a given user:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">#Find user id first
db.getCollection('AspNetUsers').find({}, {'UserName':1}).pretty()
#Then use id to unset values
db.getCollection('AspNetUsers').update({"_id": "USER_ID"}, {$unset: { "OneTimePasswordSecretBytes": 1, "IsOTPVerified": 1, "IsOtpEnforced": 1}})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h3>GridFS (fs.files and fs.chunks)</h3>
        <p>To detect orphaned plugin artifacts (often the result of failed plugin upgrades):</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">​db.fs.files.find({filename:/sw_microsoft_exchange/})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To find and/or delete the byte stream for an unnecessary plugin:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.getCollection('fs.chunks').find({'files_id': 'UPLOADED_FILE_ID'}) // the UPLOADED_FILE_ID is the _id value from the spurious entry(ies) resulting from the above query, if present</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To detect large and/or orphaned files that were added to a Swimlane record's attachments fields:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.fs.chunks.aggregate([{$group:{_id: "$files_id", chunks: {$sum: 1}}}, {$sort:{chunks:-1}}]).forEach(function(f){
if (f.chunks &gt; 15) {
print(f._id + "\t" + f.chunks)
}
})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h3>Applications</h3>
        <p>To find all of the fields in a given application of a given type:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Applications.find( { Fields: { $elemMatch: {FieldType: 8, TargetId: null } } }, {'Fields.$.Name':1})
// field types are: 1- Text, 2- Numeric, 3- Selection, 4- Date, 5- User/Group, 6- Attachments 7- Tracking Id, 8- Reference, 10- Comments, 11- History, 12- List
// there is no 9</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h3>SignalRMessages</h3>
        <p>Setting a timeout on SignalR (web socket) messages:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.getCollection('SignalRMessages').createIndex({ "CreatedDate": 1 }, { expireAfterSeconds: 300 } )</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>MongoDB SwimlaneHistory Database</h2>
        <p>The queries in this section are useful after connecting to MongoDB’s SwimlaneHistory database.</p>
        <h3>Records</h3>
        <p>To retrieve every historic revision of a given record:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">db.Records.find({'Version.TrackingFull':'CASE-6'})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">// alternate:
db.Records.find({'ReferenceId': 'my-record-id'})</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h3>Kubernetes</h3>
        <p>To ascertain the MongoDB connection string:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">kubectl -n $ns get secrets
kubectl -n $ns get secrets swimlane-tasks -o yaml
echo "[the value of *_Data_Mongo_SwimlaneConnectionString]” | base64 -d</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>To recover MongoDB usernames and/or passwords from secrets:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">kubectl -n $ns get secrets
# select desired secret (eg. mongo-admin in example)
kubectl -n $ns get secrets swimlane-sw-mongo-admin -o yaml
echo "[the value of user and/or password]” | base64 -d</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>Python</h2>
        <p>This section provides you with some easy methods to inspect JSON data returned from callees.</p>
        <p>For a small amount of data, use _json.dumps_ in combination with _print_ to inspect the data in the console:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">from swimlane import Swimlane
swimlane = Swimlane('https://HOST', 'USER', 'PASSWORD', verify_ssl=False)
app = swimlane.apps.get(name='Doug SA Change Selection Field')
selection_field_def = app.get_field_definition_by_name('Selection')

print(json.dumps(selection_field_def, sort_keys=True, indent=4, separators=(",", ": ")))</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>For a larger JSON object, write it out to a file and then inspect the text file:</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">with open('C:\temp\inspect_json.txt', 'a') as f:
json.dump(selection_field_def, f, sort_keys=True, indent=4, separators=(",", ": "))</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>&#160;</p>
    </body>
</html>